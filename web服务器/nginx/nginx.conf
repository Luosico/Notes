#worker进程运行的用户和用户组 user username [groupname]
user  root;
# worker进程个数
worker_processes  2;
#error日志 路径和日志级别
error_log  /var/log/nginx/error.log error;
#保存master进程ID的pid文件存放路径
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http{
    inlcude mime.types;
    default_type application/octet-stream;
    access_log /var/log/nginx/access.log;

    sendfile on;

    # 负载均衡， 与反向代理中的proxy_pass使用
    upstream proxy{
        # ip_hash策略，不能与 weight（权重）同时使用
        ip_hash;
        server proxy1.example.com:80;
        # weight 权重策略
        server proxy2.example.com weight=5;
    }

    # 每个server块就是一个虚拟主机
    server{
        listen localhost:80;
        # 主机名称
        server_name localhost;

        # 匹配URI location [=|~|~*|^~|@]/uri/ {...}
        # = 把URI作为字符串，以便与参数中的uri做完全匹配
        # ~ 字母大小写敏感
        # ~* 忽略字母大小写
        # ^~ 只要前半部分匹配即可
        # @ 仅用于Nginx服务内部请求之间的重定向
        location / {
            # 以root方式设置资源路径，加上location后配置的路径
            root /usr/share/html/;
            # 以alias方式设置资源路径, 把location后配置的路径丢弃
            alias /usr/share/html/;
            # 首页
            index /html/index.html;

            # 根据HTTP返回码重定向页面
            error_page 404 /404.html;
            error_page 502 503 504 /50x.html;
            error_page 403 http://example.com/forbidden.html;
            # 重定向到另一个location中处理
            error_page 404 = @fallback;
            # 更改返回的错误码
            error_page 404 =200 /empty.gif;

        }

        location @fallback{
            # 与upstream一起使用
            proxy_pass http://proxy;
        }
    }

}